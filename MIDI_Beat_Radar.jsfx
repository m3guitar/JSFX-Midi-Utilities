desc:Midi Beat Radar [OLE]

// Draws the timing of onsets inside a circle.
// The length of the line indicates the velocity.
// Also prints the fractional value, in quaternotes,
// of the most recent beat.
//
// Updated with shortest period reduced from 1/4 to 1/8
// Updated with graphics resizing and black background
//
// Ole Kirkeby, September 2022

slider1: 2<1,  8,1>Period (8ths)
slider2: 8<1,100,1>History (beats)

in_pin:none
out_pin:none

@init
INITIALIZING = 1;
playstate1 = 0;
width   = 0;
height  = 0;

noteOn   = 0x90;
noteOff  = 0x80;
radius   = 400;
midi_max = 127;
pi       =   3.1415926535;
period   =   2;
history  =   8;
aBeat    = 100;
aVelo    = 200;

counter = 0;
loop (history,
    aBeat[counter] = 0;
    aVelo[counter] = 0;
    counter += 1;
);
counter = 0;

@slider
period  = slider1 / 2;
history = slider2;

@block
while
(
    now = beat_position;

    midirecv(offset, msg1, msg2, msg3) ?
    (
        type     = msg1 & 0xF0;
        channel  = msg1 & 0x0F;
        velocity = msg3;

        // Replace noteOn velocity zero with noteOff
        type == noteOn && velocity == 0 ?
        (
            type = noteOff;
        );

        type == noteOn ?
        (
            counter = (counter + 1) % history;
            aBeat[counter] = now + offset * tempo / (60 * srate);
            aVelo[counter] = (radius * velocity) / midi_max;
        );

        midisend(offset, msg1, msg2, msg3);

        1;
    ) : 0;
);

@gfx 0 0
// If window is resized, set INITIALIZING flag
width != gfx_w ? (
    INITIALIZING = 1;
    width = gfx_w;
);
height != gfx_h ? (
    INITIALIZING = 1;
    height = gfx_h;
);

INITIALIZING == 1 ?
(
    // Draw black screen
    gfx_x = 0; gfx_y = 0;
    gfx_r = 0; gfx_g = 0; gfx_b = 0;
    gfx_a = 1;
    gfx_rectto(gfx_w,gfx_h);

    // Calculate new plot parameters
    center_x = gfx_w / 2;
    center_y = gfx_h / 2;
    radius = 0.5 * min(gfx_w,gfx_h);

    INITIALIZING = 0;
);

zx = gfx_w / 2;
zy = gfx_h / 2;

// Draw circle
CIRCLE_GRAY = 0.5;
gfx_r = CIRCLE_GRAY; gfx_g = CIRCLE_GRAY; gfx_b = CIRCLE_GRAY;
gfx_circle(zx, zy, radius);

playstate1 == play_state ? ( // No change in play state
    gfx_fill    = 1;
    gfx_counter = 0;

    // Draw history of beats
    HISTORY_GRAY = 0.1;
    gfx_r = HISTORY_GRAY; gfx_g = HISTORY_GRAY; gfx_b = HISTORY_GRAY;
    gfxcounter = 0;
    loop (history,
        gfx_x = zx; gfx_y = zy;
        gfx_lineto(zx + aVelo[gfxcounter] * sin(aBeat[gfxcounter] * 2 * pi / period),
                   zy - aVelo[gfxcounter] * cos(aBeat[gfxcounter] * 2 * pi / period));
        gfxcounter += 1;
    );

    // Draw latest beat
    gfx_x = zx; gfx_y = zy;
    gfx_r = 0; gfx_g = 1; gfx_b = 0; //colour green
    gfx_lineto(zx + aVelo[counter] * sin(aBeat[counter] * 2 * pi / period),
               zy - aVelo[counter] * cos(aBeat[counter] * 2 * pi / period));
) : ( // Play has been stopped or started
    INITIALIZING = 1;
    playstate1 = play_state;
);
